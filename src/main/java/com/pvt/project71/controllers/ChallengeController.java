package com.pvt.project71.controllers;

import com.pvt.project71.domain.TimeStamps;
import com.pvt.project71.domain.dto.ChallengeDto;
import com.pvt.project71.domain.entities.ChallengeEntity;
import com.pvt.project71.domain.entities.UserEntity;
import com.pvt.project71.mappers.Mapper;
import com.pvt.project71.services.ChallengeService;
import com.pvt.project71.services.JwtService;
import com.pvt.project71.services.UserService;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.List;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.stream.Collectors;

@RestController
public class ChallengeController {

    private ChallengeService challengeService;
    private Mapper<ChallengeEntity, ChallengeDto> challengeMapper;
    private UserService userService;
    private JwtService jwtService;

    public ChallengeController(ChallengeService challengeService, Mapper<ChallengeEntity, ChallengeDto> challengeMapper, UserService userService, JwtService jwtService) {
        this.challengeService = challengeService;
        this.challengeMapper = challengeMapper;
        this.userService = userService;
        this.jwtService = jwtService;
    }

    /**
     * Create a Challenge.
     * <p><b>POST</b><code>/challenges</code></p>
     * @param challengeDto Json Body. Expected fields: <ul>
     *                     <li><b>name</b> (String, Required)</li>
     *                     <li><b>description</b> (String, Optional)</li>
     *                     <li><b>event</b> (an event json, Optional). The event Json only needs the events id field and nothing else.
     *                     If and event is not provided it will fallback to the global event</li>
     *                     <li><b>points</b> (Integer, Required), must be larger than 0</li>
     *                     <li><b>dates</b>(List of dates, required) in format "yyyy-mm-ddThh:mm"<ul>
     *                         <li><b>startsAt</b>(date, optional), if left null it will start at creation, or when the event starts if it haven't yet.
     *                     The challenge is not allowed to start before the event</li>
     *                         <li><b>endsAt</b>(date, required), the challenge is not allowed to end after the event</li></ul>
     *                     <li><b>maxCompletions</b> (Integer, Optional), the amount of users that can complete a challenge,
     *                     if left null there is no limit </li>
     *                     <li><b>proofType</b>(ProofType, Required), ProofType is an enum that describes how challenge is deemed completed. For example:
     *                     <code>REQUEST</code> requires the creator or an admin (if it is a challenge in an event) to approve it.</li>
     * </ul>
     * @param userToken Token to verify and link to a user.
     * @return A responseEntity with status 201 and the created challenge, with its autogenerated id.
     * <p><b>Possible Errors:</b></p> <ul>
     *     <li><b>400 Bad Request</b> - Missing required field or wrongly parsed Json.</li>
     *     <li><b>401 Unauthorized</b> - If token is invalid or cant be linked to a user.</li>
     *     <li><b>403 Forbidden</b> - If trying a User tries adding a Challenge to an event they aren't an admin in.</li>
     * </ul>
     */
    @PostMapping(path = "/challenges")
    public ResponseEntity<ChallengeDto> createChallenge(@Valid @RequestBody ChallengeDto challengeDto, @AuthenticationPrincipal Jwt userToken) {
        if (challengeDto.getDates() == null || challengeDto.getDates().getEndsAt() == null ||
                (challengeDto.getDates().getStartsAt() != null && challengeDto.getDates().getStartsAt().isBefore(LocalDateTime.now()))) {
            return new ResponseEntity<ChallengeDto>(HttpStatus.BAD_REQUEST);
        } if (!jwtService.isTokenValid(userToken)) {
            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
        }
        Optional<UserEntity> user = userService.findOne(userToken.getSubject());
        if (user.isEmpty()) {
            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
        }
        challengeDto.getDates().setCreatedAt(null);
        ChallengeEntity challengeEntity = challengeMapper.mapFrom(challengeDto);
        challengeEntity.setCreator(user.get());
        challengeEntity = challengeService.save(challengeEntity, user.get());
        return new ResponseEntity<>(challengeMapper.mapTo(challengeEntity), HttpStatus.CREATED);
    }

    /**
     * Get a specific Challenge.
     * <p><b>GET</b><code>/challenges/{id}</code></p>
     * @param id Id of the Challenge to be retrieved
     * @return The challenge with status 200
     * <p><b>Possible Errors:</b></p> <ul>
     *     <li><b>404 Not Found</b> - If the Challenge doesn't exist.</li>
     * </ul>
     */
    @GetMapping(path = "/challenges/{id}")
    public ResponseEntity<ChallengeDto> getChallenge(@PathVariable("id") Integer id) {
        Optional<ChallengeEntity> found = challengeService.find(id);
        return found.map(challengeEntity -> {
            ChallengeDto dto = challengeMapper.mapTo(challengeEntity);
            return new ResponseEntity<>(dto, HttpStatus.OK);
        }).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    /**
     * Deletes a Challenge.
     * <p><b>DELETE</b><code>/challenges/{id}</code></p>
     * @param id Id of the Challenge to be deleted.
     * @param userToken Token to verify and link to a user.
     * @return Status 204
     * <p><b>Possible Errors:</b></p> <ul>
     *     <li><b>401 Unauthorized</b> - If the token is invalid or cant be linked to a user.</li>
     *     <li><b>403 Forbidden</b> - If the Token isn't linked to the creator, or an admin if the challenge belongs to an event</li>
     *     <li><b>404 Not Found</b> - If the Challenge trying to be deleted doesn't exist.</li>
     * </ul>
     */
    @DeleteMapping(path = "/challenges/{id}")
    public ResponseEntity deleteChallenge(@PathVariable("id") Integer id, @AuthenticationPrincipal Jwt userToken) {
        if (!jwtService.isTokenValid(userToken)) {
            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
        }

        Optional<UserEntity> user = userService.findOne(userToken.getSubject());
        if (challengeService.find(id).isEmpty()) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        } if (user.isEmpty()) {
            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
        }

        challengeService.delete(id, user.get());
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    /**
     * Partially update a Challenge. A partial update only updates fields that aren't empty.
     * <p><b>PATCH</b><code>challenges/{id}</code></p>
     * @param id The id of the Challenge to be updated
     * @param challengeDto Json Body. Expected fields: <ul>
     *                     <li><b>name</b> (String, Optional)</li>
     *                     <li><b>description</b> (String, Optional)</li>
     *                     <li><b>maxCompletions</b> (Integer, Optional), the amount of users that can complete a challenge,
     *                     if left null there is no limit </li>
     *                     <li><b>proofType</b>(ProofType, Optional), ProofType is an enum that describes how challenge is deemed completed. For example:
     *                     <code>REQUEST</code> requires the creator or an admin (if it is a challenge in an event) to approve it.</li></ul>
     *                     <b>Dates, event and points are not allowed to be changed</b>
     * @param userToken Token to verify and link to a user.
     * @return A responseEntity with the updated challenge and status 200
     * <p><b>Possible Errors:</b></p> <ul>
     *     <li><b>401 Unauthorized</b> - If the token is invalid or cant be linked to a user.</li>
     *     <li><b>403 Forbidden</b> - If the Token isn't linked to the creator, or an admin if the challenge belongs to an event</li>
     *     <li><b>404 Not Found0</b> - If the Challenge doesn't exist.</li>
     * </ul>
     */
    @PatchMapping(path = "/challenges/{id}")
    public ResponseEntity<ChallengeDto> partialUpdate(
            @PathVariable("id") Integer id,
            @RequestBody ChallengeDto challengeDto,
            @AuthenticationPrincipal Jwt userToken) {
        if (!jwtService.isTokenValid(userToken)) {
            return new ResponseEntity(HttpStatus.UNAUTHORIZED);
        }
        Optional<ChallengeEntity> found = challengeService.find(id);
        Optional<UserEntity> user = userService.findOne(userToken.getSubject());
        if (found.isEmpty()) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        } if (user.isEmpty()) {
            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
        }

        challengeDto.setId(id);
        ChallengeEntity challengeEntity = challengeMapper.mapFrom(challengeDto);
        challengeEntity.setCreator(found.get().getCreator());
        challengeEntity.setEvent(found.get().getEvent());
        ChallengeEntity updatedChallenge = challengeService.partialUpdate(id, challengeEntity, user.get());
        return new ResponseEntity<>(challengeMapper.mapTo(updatedChallenge), HttpStatus.OK);
    }

    /**
     * Fully Update a Challenge. Anything left blank will be updated to blank.
     * <p><b>PUT</b><code>/challenges/{id}</code></p>
     * @param id Id of Challenge to update.
     * @param challengeDto Json Body. Expected Fields: <ul>
     *                     <li><b>name</b> (String, Required)</li>
     *                     <li><b>description</b> (String, Optional)</li>
     *                     <li><b>maxCompletions</b> (Integer, Optional), the amount of users that can complete a challenge,
     *                     if left null there is no limit </li>
     *                     <li><b>proofType</b>(ProofType, Required), ProofType is an enum that describes how challenge is deemed completed. For example:
     *                     <code>REQUEST</code> requires the creator or an admin (if it is a challenge in an event) to approve it.</li></ul>
     *                     <b>Dates, event and points are not allowed to be changed</b>
     * @param userToken Token to verify and link to a user.
     * @return A ResponseEntity with status 200 and the updated challenge
     * <p><b>Possible Errors:</b></p> <ul>
     *     <li><b>400 Bad Request</b> - Missing required fields or wrongly parsed Json.</li>
     *     <li><b>401 Unauthorized</b> - If the token is invalid or cant be linked to a user.</li>
     *     <li><b>403 Forbidden</b> - If the Token isn't linked to the creator, or an admin if the challenge belongs to an event</li>
     *     <li><b>404 Not Found0</b> - If the Challenge doesn't exist.</li>
     * </ul>
     */
    @PutMapping(path = "/challenges/{id}")
    public ResponseEntity<ChallengeDto> fullUpdate(@PathVariable("id") Integer id, @Valid @RequestBody ChallengeDto challengeDto,
                                                   @AuthenticationPrincipal Jwt userToken) {
        Optional<ChallengeEntity> found = challengeService.find(id);
        if (found.isEmpty()) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }if (!jwtService.isTokenValid(userToken)) {
            return new ResponseEntity(HttpStatus.UNAUTHORIZED);
        }
        Optional<UserEntity> user = userService.findOne(userToken.getSubject());
        if (user.isEmpty()) {
            return new ResponseEntity(HttpStatus.UNAUTHORIZED);
        }

        challengeDto.setDates(found.get().getDates());
        challengeDto.getDates().setUpdatedAt(LocalDateTime.now());
        challengeDto.setId(id);
        ChallengeEntity challengeEntity = challengeMapper.mapFrom(challengeDto);
        challengeEntity.setEvent(found.get().getEvent());
        ChallengeEntity updatedChallenge = challengeService.save(challengeEntity, user.get());
        return  new ResponseEntity<>(challengeMapper.mapTo(updatedChallenge), HttpStatus.OK);
    }

    /**
     * Get all Challenges with an optional query's.
     * <p><b>GET</b><code>/challenges?event=id</code> can also just be <code>/challenges</code></p>
     * @param email Optional query parameter to find challenges created by a user.
     * @param eventId Optional query parameter to find challenges that belongs to an event.
     * @return A list of challenges based on the query with status 200.
     */
    @GetMapping("/challenges")
    public ResponseEntity<List<ChallengeDto>> getChallenges(@RequestParam(value = "user", required = false) String email,
                                                                          @RequestParam(value = "eventId", required = false) Integer eventId) {
        List<ChallengeEntity> challenges = challengeService.getChallenges(email, eventId);
        List<ChallengeDto> dtos = challenges.stream()
                .map(challengeMapper::mapTo)
                .collect(Collectors.toList());
        return ResponseEntity.ok(dtos);
    }
}
