package com.pvt.project71;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.pvt.project71.domain.dto.ScoreDto;
import com.pvt.project71.domain.entities.EventEntity;
import com.pvt.project71.domain.entities.UserEntity;
import com.pvt.project71.domain.entities.score.ScoreId;
import com.pvt.project71.mappers.mapperimpl.ScoreMapper;
import com.pvt.project71.mappers.mapperimpl.UserMapperImpl;
import com.pvt.project71.repositories.EventRepository;
import com.pvt.project71.repositories.UserRepository;
import com.pvt.project71.services.ScoreService;
import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import com.pvt.project71.domain.entities.score.ScoreEntity;
import com.pvt.project71.repositories.ScoreRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.RequestBuilder;
import org.springframework.test.web.servlet.ResultMatcher;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.transaction.annotation.Transactional;

import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

@SpringBootTest
@ActiveProfiles("test")
@TestPropertySource(locations = "classpath:application-test.properties")
@ExtendWith(SpringExtension.class)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
@AutoConfigureMockMvc
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.ANY)
@Transactional
public class ScoreTest {
    private final ScoreRepository scoreRepository;
    private final UserRepository userRepository;
    private final EventRepository eventRepository;
    private final ScoreService scoreService;
    private final MockMvc mockMvc;
    private final ScoreMapper scoreMapper;
    private final UserMapperImpl userMapper;
    private final ObjectMapper objectMapper;
    public  static final String SCORES = "/scores/";
    public  static final String GET_SCORE_BY_EVENT = SCORES + "events/";
    public static final String GET_SCORE_BY_USER = SCORES + "users/";
    private UserEntity user;
    private EventEntity event;



    @Autowired
    public ScoreTest(ScoreRepository scoreRepository, UserRepository userRepository, EventRepository eventRepository, ScoreService scoreService, MockMvc mockMvc, ScoreMapper scoreMapper, UserMapperImpl userMapper) {
        this.scoreRepository = scoreRepository;
        this.userRepository = userRepository;
        this.eventRepository = eventRepository;
        this.scoreService = scoreService;
        this.mockMvc = mockMvc;
        this.scoreMapper = scoreMapper;
        this.userMapper = userMapper;
        this.objectMapper   = new ObjectMapper().registerModule(new JavaTimeModule());
    }
    @BeforeEach
    void setUp() {
        // Prepare valid primary key for score
        user = TestDataUtil.createValidTestUserEntity();
        event = TestDataUtil.createTestEventEntityA();
        user = userRepository.save(user);
        // Event needs to be saved to obtain autogenerated id
        event = eventRepository.save(event);
    }
    @Test
    public void testGetValidScoreScoreHttpOk() throws Exception {
        //Populate score
        scoreRepository.save(TestDataUtil.createValidScoreEntity(user,event));
        mockMvc.perform(MockMvcRequestBuilders.get(SCORES + user.getEmail() + "/" + event.getId())
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(MockMvcResultMatchers.status().isOk());
    }
    @Test
    public void testGetValidScoreReturnsHttpOkAndScoreDto() throws Exception {
        ScoreEntity validScoreEntity = TestDataUtil.createValidScoreEntity(user,event);
        //Populate score
       validScoreEntity = scoreRepository.save(validScoreEntity);
       String scoreDtoJson = objectMapper.writeValueAsString(scoreMapper.mapTo(validScoreEntity));
       mockMvc.perform(MockMvcRequestBuilders.get(SCORES + user.getEmail() + "/" + event.getId())
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpectAll(MockMvcResultMatchers.status().isOk()
                , MockMvcResultMatchers.content().json(scoreDtoJson));
    }
    @Test
    public void testGetAllScoresByValidUserReturnsOk() throws Exception {
        ScoreEntity validScoreEntity = TestDataUtil.createValidScoreEntity(user,event);
        scoreRepository.save(validScoreEntity);
        mockMvc.perform(MockMvcRequestBuilders.get(GET_SCORE_BY_USER + user.getEmail())
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpectAll(MockMvcResultMatchers.status().isOk());
    }

    @Test
    public void testGetAllScoresByValidUserReturnsOkAndCorrectScores() throws Exception {
        ScoreEntity scoreEntityA = TestDataUtil.createValidScoreEntity(user,event);
        //EventEntity needs to be saved for auto id to be generated
        EventEntity eventB = eventRepository.save(TestDataUtil.createTestEventEntityB());
        ScoreEntity scoreEntityB = TestDataUtil.createValidScoreEntity(user,eventB);
        scoreRepository.save(scoreEntityA);
        scoreRepository.save(scoreEntityB);
        List<ScoreDto> scores = Arrays.asList(scoreMapper.mapTo(scoreEntityA),scoreMapper.mapTo(scoreEntityB));
        String scoresJson = objectMapper.writeValueAsString(scores);
        mockMvc.perform(MockMvcRequestBuilders.get(GET_SCORE_BY_USER + user.getEmail()).contentType(MediaType.APPLICATION_JSON))
                .andExpectAll(MockMvcResultMatchers.status().isOk()
                , MockMvcResultMatchers.content().json(scoresJson));
    }
    @Test
    public void testGetAllScoresByInalidUserReturnsNotFound() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.get("/scores/users/" + user.getEmail()).contentType(MediaType.APPLICATION_JSON))
                .andExpectAll(MockMvcResultMatchers.status().isNotFound());
    }
    @Test
    public void testCreateValidScoreHttpCreated() throws Exception {
        ScoreEntity validScoreEntity = TestDataUtil.createValidScoreEntity(user,event);
        String scoreJson = objectMapper.writeValueAsString(scoreMapper.mapTo(validScoreEntity));
        mockMvc.perform(MockMvcRequestBuilders.post("/scores")
                .contentType(MediaType.APPLICATION_JSON)
                .content(scoreJson))
                .andExpect(MockMvcResultMatchers.status().isCreated());
    }
    @Test
    public void testDeleteValidScoreHttpNoContenty() throws Exception {
        ScoreEntity validScoreEntity = TestDataUtil.createValidScoreEntity(user,event);
        scoreRepository.save(validScoreEntity);

        mockMvc.perform(MockMvcRequestBuilders.delete("/scores/" + user.getEmail() + "/" + event.getId())
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(MockMvcResultMatchers.status().isNoContent());
    }
    @Test
    public void testDeleteInvalidScoreHttpNoContenty() throws Exception {
        //No Score exists
        mockMvc.perform(MockMvcRequestBuilders.delete("/scores/" + user.getEmail() + "/" + event.getId())
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(MockMvcResultMatchers.status().isNoContent());
    }
    @Test
    public void testGetAllScoresByValidEventReturnsOk() throws Exception {
        ScoreEntity validScoreEntity = TestDataUtil.createValidScoreEntity(user,event);
        scoreRepository.save(validScoreEntity);
        mockMvc.perform(MockMvcRequestBuilders.get(GET_SCORE_BY_EVENT + event.getId())
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpectAll(MockMvcResultMatchers.status().isOk());
    }
    @Test
    public void testGetAllScoresByValidEventReturnsOkAndCorrectScores() throws Exception {
        ScoreEntity scoreEntityA = TestDataUtil.createValidScoreEntity(user,event);
        //EventEntity needs to be saved for auto id to be generated
        UserEntity userEntityB = userRepository.save(TestDataUtil.createValidTestUserEntityB());
        ScoreEntity scoreEntityB = TestDataUtil.createValidScoreEntity(userEntityB,event);
        scoreRepository.save(scoreEntityA);
        scoreRepository.save(scoreEntityB);
        List<ScoreDto> scores = Arrays.asList(scoreMapper.mapTo(scoreEntityA),scoreMapper.mapTo(scoreEntityB));
        String scoresJson = objectMapper.writeValueAsString(scores);
        mockMvc.perform(MockMvcRequestBuilders.get(GET_SCORE_BY_EVENT + event.getId()).contentType(MediaType.APPLICATION_JSON))
                .andExpectAll(MockMvcResultMatchers.status().isOk()
                        , MockMvcResultMatchers.content().json(scoresJson));
    }
    @Test
    public void testGetAllScoresByInvalidEventReturnsNotFound() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.get(GET_SCORE_BY_EVENT + event.getId())
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpectAll(MockMvcResultMatchers.status().isNotFound());
    }

    @Test
    public void testScoreCreation(){
        ScoreEntity validScore = TestDataUtil.createValidScoreEntity(user,event);
        ScoreId id  = validScore.getScoreId();
        scoreRepository.save(validScore);
        Assertions.assertThat(id.equals(scoreRepository.findById(id).get()));
    }
    @Test
    public void testAddingPoints() {
        ScoreEntity validScore = TestDataUtil.createValidScoreEntity(user,event);
        scoreRepository.save(validScore);
        int someAmount = 2;
        scoreService.addPoints(validScore.getScoreId(),someAmount);
        Assertions.assertThat(validScore.getScore()+someAmount == scoreService.findOne(validScore.getScoreId()).get().getScore());
    }
    @Test
    public void testSubtractPoints() {
        ScoreEntity validScore = TestDataUtil.createValidScoreEntity(user,event);
        scoreRepository.save(validScore);
        int someAmount = 2;
        scoreService.subtractPoints(validScore.getScoreId(),someAmount);
        Assertions.assertThat(validScore.getScore()-someAmount == scoreService.findOne(validScore.getScoreId()).get().getScore());
    }
}
